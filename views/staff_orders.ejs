<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Staff Orders</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        /* style.css */
body {
    background: url('https://images.unsplash.com/photo-1605926637512-c8b131444a4b?q=80&w=1780&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D') no-repeat center center/cover;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; /* ฟอนต์ที่ทันสมัย */
    padding-top: 50px;
    height: 100vh;
    width: 100vw;
    background-position: center;
    background-size: cover;
}

.container {
    background-color: #ffffff; /* สีพื้นหลังของกล่อง */
    padding: 30px; /* ระยะห่างด้านใน */
    border-radius: 10px; /* ขอบมน */
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1); /* เงา */
    max-width: 800px; /* กำหนดความกว้างสูงสุด */
    margin: auto; /* จัดกลาง */
}

h1 {
    color: #333; /* สีหัวข้อ */
    font-size: 2rem; /* ขนาดฟอนต์ */
}

.text-muted {
    text-align: center; /* จัดกลางข้อความ */
    margin-top: 20px; /* ระยะห่างด้านบน */
}

.card {
    border: none; /* ไม่มีขอบ */
    border-radius: 8px; /* ขอบมน */
    transition: transform 0.2s; /* การเปลี่ยนแปลงที่นุ่มนวล */
}

.card:hover {
    transform: scale(1.02); /* ขยายเมื่อเลื่อนเมาส์ไปเหนือ */
}

.card-header {
    font-weight: bold; /* ทำให้หัวข้อของการ์ดหนา */
}

.list-group-item {
    background-color: #f8f9fa; /* สีพื้นหลังของรายการ */
    border: 1px solid #dee2e6; /* สีขอบของรายการ */
    border-radius: 5px; /* ขอบมน */
}

.btn {
    margin: 5px; /* ระยะห่างระหว่างปุ่ม */
    padding: 10px 15px; /* ขนาดของปุ่ม */
    border-radius: 5px; /* ขอบมน */
    transition: background-color 0.3s; /* การเปลี่ยนแปลงสีพื้นหลังอย่างนุ่มนวล */
}

.btn:hover {
    opacity: 0.8; /* ลดความทึบเมื่อเอาเมาส์ไปอยู่เหนือปุ่ม */
}

    </style>
</head>
<body>
    <%- include('headerbar') %>
    <div class="container my-5">
        <h1 class="text-center mb-4">New Orders</h1>
        <div id="orders">
            <p class="text-muted">Waiting for new orders...</p>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
    
        let statusOptions = [];
    
        async function fetchStatusOptions() {
            const response = await fetch('/status-options');
            statusOptions = await response.json();
        }
        fetchStatusOptions();
    
        socket.on('newOrderData', (orders) => {
            const ordersDiv = document.getElementById('orders');
            ordersDiv.innerHTML = "";
    
            orders.forEach(order => {
                ordersDiv.innerHTML += createOrderHtml(order);
            });
        });
    
        socket.on('orderStatusUpdate', (updatedOrder) => {
            const orderElement = document.getElementById(`order-${updatedOrder.order_id}`);
            if (orderElement) {
                orderElement.outerHTML = createOrderHtml(updatedOrder);
            }
        });
    
        function createOrderHtml(order) {
            return `
                <div class="card my-3" id="order-${order.order_id}">
                    <div class="card-header bg-primary text-white">
                        Order ID: ${order.order_id}
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">Total Before Discount: $${order.total_price.toFixed(2)}</h5>
                        ${order.promotion ? `<p><strong>Promotion:</strong> ${order.promotion} - Discount: $${order.discountAmount.toFixed(2)}</p>` : ''}
                        <p><strong>Final Total:</strong> $${(order.total_price - order.discountAmount).toFixed(2)}</p>
                        <p><strong>Status:</strong> ${order.status}</p>
                        <ul class="list-group">
                            ${order.items.map(item => `
                                <li class="list-group-item">
                                    <strong>${item.pro_name}</strong> x ${item.quantity} - $${(item.price * item.quantity).toFixed(2)}
                                    <br><small>Details: ${item.detail || 'No details provided'}</small>
                                </li>
                            `).join('')}
                        </ul>
                        <div class="mt-3">
                            ${statusOptions.map(status => `
                                <button class="btn ${status.buttonClass}" onclick="updateOrderStatus(${order.order_id}, ${status.id})">${status.name}</button>
                            `).join('')}
                        </div>
                    </div>
                </div>
            `;
        }
    
        function updateOrderStatus(orderId, statusId) {
            socket.emit('updateStatus', { orderId, statusId });
        }
    </script>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
