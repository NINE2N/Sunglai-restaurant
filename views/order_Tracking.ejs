<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Tracking</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
         /* ตั้งค่าสไตล์พื้นหลังและโครงร่างหน้าเว็บ */
        body {
            background: url('https://images.unsplash.com/photo-1605926637512-c8b131444a4b?q=80&w=1780&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D') no-repeat center center/cover;
            padding-top: 50px;
        height: 100vh;
        width: 100vw;
        background-position: center;
        background-size: cover;
        }
        /* ตั้งค่าสีและขนาดของหัวข้อ */
        h1 {
            color: #ffffff;
            font-weight: bold;
        }
        /* สไตล์การ์ด */  
        .card {
            border: 1px solid #007bff;
            border-radius: 8px;
            box-shadow: 0px 4px 10px rgba(0, 123, 255, 0.2);
        }
        
        .card-header {
            background-color: #007bff;
            font-weight: bold;
            border-top-left-radius: 8px;
            border-top-right-radius: 8px;
        }

        .card-body {
            background-color: #ffffff;
            padding: 20px;
        }

        .text-secondary, .text-warning, .text-success {
            font-weight: 600;
        }

        .list-group-item {
            background-color: #f9f9f9;
            border: none;
        }

        .list-group-item strong {
            color: #333;
        }

        .text-muted {
            color: #6c757d;
        }

        /* Custom color for statuses */
        .text-warning {
            color: #ff9800;
        }
        
        .text-danger {
            color: #dc3545;
        }
    </style>
</head>
<body>
    <!-- แทรก headerbar จากไฟล์อื่น -->
    <%- include('headerbar') %>   
    <div class="container my-5">
        <h1 class="text-center mb-4">Track Your Orders</h1>
        
        <!-- พื้นที่แสดงรายการคำสั่งซื้อ -->
        <div id="orders-list">
            <p class="text-muted text-center">Loading your orders...</p>
        </div>
    </div>

    <!-- โหลด Socket.io -->
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const userId = <%= userId %>; // รับ userId จากเซิร์ฟเวอร์
        const socket = io();
    
        // ฟังก์ชันดึงข้อมูลคำสั่งซื้อของผู้ใช้
        async function fetchOrders() {
            try {
                const response = await fetch(`/orders/${userId}`);
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const orders = await response.json();
                if (orders.length > 0) {
                    displayOrders(orders); // แสดงรายการคำสั่งซื้อถ้ามี
                } else {
                    document.getElementById('orders-list').innerHTML = `<p class="text-center text-danger">No orders found.</p>`;
                }
            } catch (error) {
                console.error('Error fetching orders:', error);
                document.getElementById('orders-list').innerHTML = `<p class="text-center text-danger">Failed to load orders: ${error.message}</p>`;
            }
        }

        // ฟังก์ชันแสดงผลรายการคำสั่งซื้อ
        function displayOrders(orders) {
            const ordersDiv = document.getElementById('orders-list');
            ordersDiv.innerHTML = ""; 
            orders.sort((a, b) => b.order_id - a.order_id);  // จัดเรียงตาม order_id ใหม่สุดด้านบน
            
            // วนลูปแสดงรายการคำสั่งซื้อแต่ละรายการ
            orders.forEach(order => {
                ordersDiv.innerHTML += createOrderHtml(order);
            });
        }
        
        // ฟังก์ชันสร้าง HTML สำหรับคำสั่งซื้อแต่ละรายการ
        function createOrderHtml(order) {
            const statusTextMap = {
                "Received": { text: "Order Received", colorClass: "text-secondary" },
                "Preparing": { text: "Preparing your Order", colorClass: "text-warning" },
                "Completed": { text: "Order Completed", colorClass: "text-success" }
            };
    
            const status = statusTextMap[order.status] || { text: `Status: ${order.status}`, colorClass: "text-muted" };
            const discountAmount = order.discountAmount ?? 0;
            const finalTotal = order.total_price - discountAmount;
    
            return `
                <div class="card my-3" id="order-${order.order_id}">
                    <div class="card-header bg-primary text-white">
                        Order ID: ${order.order_id}
                    </div>
                    <div class="card-body">
                        <h5 class="card-title ${status.colorClass}">${status.text}</h5>
                        <p><strong>Total Before Discount:</strong> $${order.total_price.toFixed(2)}</p>
                        ${order.promotion ? `<p><strong>Promotion:</strong> ${order.promotion} - Discount: $${discountAmount.toFixed(2)}</p>` : ''}
                        <p><strong>Final Total:</strong> $${finalTotal.toFixed(2)}</p>
                        <ul class="list-group">
                            ${order.items.map(item => `
                                <li class="list-group-item">
                                    <strong>${item.pro_name}</strong> x ${item.quantity} - $${(item.price * item.quantity).toFixed(2)}
                                    <br><small>Details: ${item.detail || 'No details provided'}</small>
                                </li>
                            `).join('')}
                        </ul>
                    </div>
                </div>
            `;
        }
    
        // ฟังก์ชันอัปเดตสถานะคำสั่งซื้อเมื่อมีการเปลี่ยนแปลง
        socket.on('orderStatusUpdate', (updatedOrder) => {
            const orderElement = document.getElementById(`order-${updatedOrder.order_id}`);
            if (orderElement) {
                orderElement.outerHTML = createOrderHtml(updatedOrder);
            }
        });
    
        fetchOrders(); // เรียกใช้ฟังก์ชันดึงข้อมูลคำสั่งซื้อเมื่อโหลดหน้า
    </script>
    
    <!-- โหลด Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
